객체지향 OOP object oriented programing

절차지향 정해진대로 진행해야만 함 윗줄부터 시작

절차지향에서 왜 객체지향으로 갔는가. 유지보수성을 높이는 수단으로 적용하는 것으로 개념을 잡아야함

C++ 는 C + C 라고 해서 
마이크로 소프트의 C# 는 C++ 위에 ++를 하나 더 붙여서 합친 하나의 업그레이드 된 느낌

속성 과 행동(메소드)
두개로 대부분의 것들을 정의할 수 있다. 라는 개념으로 시작.

          C++        JAVA   Python
속성 멤버변수   필드      필드     전부 같은 뜻
행동 멤버함수  메소드    함수     같은 뜻

클래스 명은 대문자로 시작
필드나 메소드는 소문자로 시작

클래스가 필드를 만들고
필드의 생성자를 통해 다시 초기화
초기화한 값으로 구현되어 있는 값을 불러들임

생성자
생성자는 리턴타입이 없고, 클래스 이름과 같아야 한다

생성자 오버로딩
정해진대로 진행해야만 함 윗줄부터 시작

절차지향에서 왜 객체지향으로 갔는가. 유지보수성을 높이는 수단으로 적용하는 것으로 개념을 잡아야함

C++ 는 C + C 라고 해서 
마이크로 소프트의 C# 는 C++ 위에 ++를 하나 더 붙여서 합친 하나의 업그레이드 된 느낌

속성 과 행동(메소드)
두개로 대부분의 것들을 정의할 수 있다. 라는 개념으로 시작.

          C++ JAVA Python
속성 멤버변수 필드 필드 전부 같은 뜻
행동 멤버함수 메소드 함수 같은 뜻

클래스 명은 대문자로 시작
필드나 메소드는 소문자로 시작

클래스가 필드를 만들고
필드의 생성자를 통해 다시 초기화
초기화한 값으로 구현되어 있는 값을 불러들임

생성자
생성자는 리턴타입이 없고, 클래스 이름과 같아야 한다

생성자 오버로딩
생성자를 명시해주지 않으면 기본 생성자를 명시해준다 **** 확인 한번 더 할 것.

가변인자

메소드
스태틱 메소드
스태틱 블록 2개의 차이

스태틱 블록은 메인으로 바로 올라갈 수 있음
스태틱 메소드는 메인에서 따로 메소드 호출을 해야 가능 ***

**객체 지향 디자인 패턴
GoF 의 Design pattern 어려움 

Head First 쉬운 디자인 패턴 초보 입문용**

싱글톤 패턴 **  ** 하나의 객체만 사용한다

final

상수 선언은 무조건 static final

setter
getter

상속

머리가 터질 것 같았지만 내일 더 머리가 터질거라는 말을 들으니 오히려 마음이 편해졌다....망한건가
