예외
에러와 오류 구분
*** 에러 안에 오류 있다.

실행하기 전에 알 수 있는건 일반예외
실행하고 나서야 알 수 있는게 실행예외 (실행하기 전에는 알 수 없는 것.)

일반예외가 가장 위(Exception)
밑에 상속받는게 싱행예외(Runtime Exception)

빨간줄이 없지만, 오류 발생이 나고, 중요한건 프로그램이 멈춰버린다는 것.
그래서 이걸 해결하는 것을 예외처리라고 한다.

try catch 문으로 진행하면 프로그램이 죽지 않는다

Money balance Throw 구문

object equal

StringBuilder **클래스명을 StringBuilder 로 하면 컴파일시 문제 발생
한번에 문자열의 개수나 더하기 빼기 등을 자유롭게 진행시킬 수 있음

Wrapper 클래스

제네릭 ** 매우 중요함 ** 현업에서 많이 사용
//제네릭을 사용했을때 나오는 식  //객체를 쓸때 타입을 정하겠다는 의미 지금은 정하지 않겠다. Main 으로 ㄱㄱ
//강제 형변환을 하면 시간과 리소스를 많이 잡아먹으니 제네릭을 사용 //제네릭은 형변환을 안해도 된다.
//형변환을 안해도 되니 속도가 더 빨라짐  //사전에 프로그램 실수도 잡아줌
//클래스 설계시에는 타입을 모름 //객체 설정시에 타입을 정해줄 수 있음
//클래스에 제네릭을 적용하는 방법
//메소드에 적용하는 방법


<제한된 타입 파라미터>
T extends 상위타입 (인터페이스도 가능, 이경우에도 extends 키워드 사용)
타입 파라미터에 지정되는 구체적인 타입은 상위 타입이거나 상위 타입의 하위 또는 구현클래스만 가능
메소드내에서 타입 파라미터 변수를 가지고 사용가는한 것은 상위 타입의 필드와 메소드로 제한된다.

<와일드카드 타입>   ****** 중요! 시험
<?> : Unbounded Wildcards (제한 없음)
모든 클래스나 인터페이스가 올 수 있음
<? extends T> Upper Bounded Wildcards (상위 클래스 제한)
  T 타입이나 T의 하위타입만 올 수 있음  
<? super T> Lower Bounded Wildcards (하위 클래스 제한)
 T 타입이나 T의 상위타입만 올 수 있음

** 제네릭 한번 더 공부할 것.

람다식
 - 람다식은 매개변수를 가지는 코드블럭
 - 객체지향 프로그래밍에 함수적 프로그래밍을 도입
 - 이벤트 지향 프로그램에 적합
 - 자바 코드가 간결해짐
 - JVM이 런타임 시에 매개변수를 가지는 코드블럭을 익명객체로 전환

 (타입 매개변수, ...) -> { 실행문; ....}

 (int a) -> { System.out.println(a) }
 (a) -> { System.out.println(a) }
  a -> System.out.println(a)

 매개변수가 없을 경우
 () -> { 실행문; ....}

 리턴문이 있을 경우
 (x, y) -> { .... return x + y; }

 리턴문만 있을 경우
 (x, y) -> x + y

<함수적 인터페이스>

 - 모든 인터페이스를 람다식의 타겟타입으로 사용할 수 없음
 - 람다식은 하나의 메소드를 정의
 - 하나의 추상메소드를 가지는 인터페이스만 람다식의 타겟 타입이 됨 (함수적 인터페이스)
 - 함수적 인터페이스 작성 시 실수를 방지하기 위해 컴파일러가 체킹해 주기를 원하는 경우
   @FunctioalInterface 어노테이션을 사용

  @FunctionalInterface
  public interface TestFunctionalInterface {
public void method();
public void anotherMethod(); // 컴파일 에러


<표준 API 함수적 인터페이스>
 - 자바에서 제공되는 표준API에서 한 개의 추상메소드를 가지는 인터페이스는 모두 람다식을
   이용해서 익명구현객체로 표현 가능


- 자바8 부터 java.util.function 패키지에 자주 사용되는 함수적 인터페이스를 표준 API로 제공
   제공되는 인터페이스는 아래와 같은 4가지
   
 - Consumer: 매개값은 있고 리턴값이 없음
 - Supplier: 매개값이 없고 리턴값이 있음
 - Function: 매개값, 리턴값 모두 있음(주로 매개값은 리턴값으로 매핑)
 - Operator: 매개값, 리턴값 모두 있음(주로 매개값을 연산하고 결과를 리턴)
 - Predicate: 매개값은 있고 리턴 타입은 boolean(매개값을 조사해서 true/false 리턴)

수업을 못들을까 화장실에 가는 시간도 아깝다
